/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package birchclusterer.GUI;

import birchclusterer.BirchAlg.BirchExec;
import birchclusterer.FeatureSelection.Dropper;
import birchclusterer.FeatureSelection.Memberships;
import birchclusterer.File.InputReader;
import birchclusterer.File.OutputWriter;
import birchclusterer.Plot.Cluster;
import java.awt.Desktop;
import java.awt.FileDialog;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author MattChiappa
 */
public class MainGUI extends javax.swing.JFrame {

    File loadedDataset = null;
    private boolean displayed;
    ArrayList<Cluster> clusters = null;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        browse = new javax.swing.JButton();
        text = new javax.swing.JTextField();
        display = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        distanceTresh = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("BIRCH Algorithm Clusterer");

        jLabel2.setText("Import Data File:");

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        text.setEditable(false);

        display.setText("Display Output");
        display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayActionPerformed(evt);
            }
        });

        save.setText("Save All Output");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel3.setText("Distance Threshold:");

        distanceTresh.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        distanceTresh.setText("0.5");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browse)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(display)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(save)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(distanceTresh, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(browse)
                    .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(distanceTresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(display)
                    .addComponent(save))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // open a file dialog so the user can import a txt data file
        JFileChooser fc = new JFileChooser(new File("/Users/MattChiappa/Documents/Research/Datasets"));
        fc.setAcceptAllFileFilterUsed(false);
        // filter only txt documents
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Document (.txt)", "txt", "text");
        fc.setFileFilter(filter);

        int returnVal = fc.showOpenDialog(MainGUI.this);

        // if a user selected a file, save the jfile
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            loadedDataset = fc.getSelectedFile();
            text.setText(loadedDataset.getName());
        }
    }//GEN-LAST:event_browseActionPerformed

    private void displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayActionPerformed
        // if the user loaded a file then read file and display, if not display error
        if (loadedDataset != null) {
            displayed = true;
            InputReader input = new InputReader(loadedDataset);
            
            // executes birch algorithm
            BirchExec birch = new BirchExec(input.getData(), Double.parseDouble(distanceTresh.getText()));
            // displays the graph in matlab then calculates memberships
            DispMatLab matlab = new DispMatLab(birch.getClusters());
            clusters = birch.getClusters();
            Memberships mem = new Memberships(clusters);
            
            // display memberships in new jframe
            clusters = mem.getClusters();
            MembershipView memView = new MembershipView(clusters);
            memView.setFrameVisible(true);
        } else {
            JOptionPane.showMessageDialog(MainGUI.this,
                    "Please choose an input file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_displayActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // if the user has displayed the data then begin save process
        if (displayed == true) {
            FileWriter fw = null;
            try {
                // ask user where they would like to save, then open file to write
                File outFile = openFile();
                fw = new FileWriter(outFile.getAbsoluteFile());
                OutputWriter out;
                Memberships mem;

                // if the user selected to not drop each feature for feature selection,
                // start writing to file
                if (!openDialog()) {
                    mem = new Memberships(clusters);
                    clusters = mem.getClusters();
                    out = new OutputWriter(clusters, fw);
                    fw.append("\n\n\n");
                } else {
                    // get the dimensions of the data
                    int dim = clusters.get(0).getData().get(0).getPoints().length;

                    // write each clustering with different features dropped 
                    out = new OutputWriter(clusters, fw);
                    fw.append("\n\n\n Feature Dropped: 1\n");
                    for (int i = 0; i < dim; i++) {
                        ArrayList<Cluster> newClusters = new Dropper(clusters, i).getClusters();
                        mem = new Memberships(clusters);
                        clusters = mem.getClusters();
                        out = new OutputWriter(newClusters, fw);
                        if ((i + 1) < dim) {
                            return;
                        }
                        fw.append("\n\n\n Feature Dropped: " + (i + 1) + "\n");
                    }
                }

                // open the file that has been written to
                Desktop desktop = Desktop.getDesktop();
                if (outFile.exists()) {
                    desktop.open(outFile);
                }

            } catch (IOException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (fw != null) {
                        fw.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(MainGUI.this,
                    "Please choose an input file or display output first.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton display;
    private javax.swing.JTextField distanceTresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton save;
    private javax.swing.JTextField text;
    // End of variables declaration//GEN-END:variables

    // opens a dialog to chose path to save to
    private File openFile() throws IOException {
        FileDialog fDialog = new FileDialog(this, "Save", FileDialog.SAVE);
        fDialog.setFile("*.csv");
        fDialog.setVisible(true);
        String path = fDialog.getDirectory() + fDialog.getFile();
        File outFile = new File(path);
        outFile.createNewFile();
        if (!outFile.exists()) {
            JOptionPane.showMessageDialog(new JFrame(),
                    "Please choose a path for the output.",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

        return outFile;
    }

    // used for feature selection
    private boolean openDialog() {
        JOptionPane dia = new JOptionPane(
                "Would you like to drop features?");
        Object[] option = new String[]{"No", "Yes"};
        dia.setOptions(option);
        JDialog dialog = dia.createDialog(null, "Drop Features");
        dialog.setVisible(true);
        Object obj = dia.getValue();

        return option[1].equals(obj);
    }
}
